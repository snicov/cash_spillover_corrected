

 /* do file header */
 return clear
 capture project, doinfo
 if (_rc==0 & !mi(r(pname))) global dir `r(pdir)'  // using -project-
 else {  // running directly
     if ("${ge_dir}"=="") do `"`c(sysdir_personal)'profile.do"'
     do "${ge_dir}/do/set_environment.do"
 }

 * Import config - running globals
 /* Note: it's unclear if this will actually do anything here, or if it will need to
    be a part of each file */
 project, original("$dir/do/GE_global_setup.do")
 include "$dir/do/GE_global_setup.do"

// end preliminaries

project, original("$do/programs/run_ge_build_programs.do")
include "$do/programs/run_ge_build_programs.do"

/*
 * Filename: ge_hh-welfare_income_revenue_EL.do
 * Description: This do file constructs the outcomes described in
 *  the HH welfare PAP household income & revenue.
 *   This corresponds to primary outcomes 3-4 and sections 5.4 to 5.4 of the household welfare PAP.
 *
 *
 * Authors: Michael Walker
 * Date created: 14 July 2017
 * Last modified: 15 Nov 2018
 */

 ** setting up to use intermediate dataset for more modular running
 project, uses("$da/intermediate/GE_HH-EL_setup.dta")

 use "$da/intermediate/GE_HH-EL_setup.dta", clear
keep s1_hhid_key version eligible survey_yr survey_mth today s6_* s7_* s8_* s9_* s12_*

/* Note: household agriculture production outcomes created separately -- merging in here */
 * this dataset generated by 103_ge_agproduction_EL.do
 project, uses("$da/intermediate/GE_HH-EL_agproduction_wide.dta") preserve
 merge 1:1 s1_hhid_key using "$da/intermediate/GE_HH-EL_agproduction_wide.dta", gen(_mag)
 tab _mag
 //assert _mag != 2 // should not have cases of this -- come back to check
 drop if _mag == 2
 drop _mag


/*********************************/
/*   FAMILY 3: income & profits  */
/*********************************/

*** TOTAL PROFITS FROM AGRICULTURE AND LIVESTOCK IN THE LAST 12 MONTHS ***
* starting on the revenue side *
tab1 s7_q6aa_cropsales_? s7_q6aa_cropsalesfx_?
recode s7_q6aa_cropsales_? (-99 = .)
replace s7_q6aa_cropsales_1 = 0 if s7_q6a_soldcrops_1 == 2
replace s7_q6aa_cropsales_5 = 0 if s7_q6a_soldcrops_5 == 2

forval i=2/4 {
    tab1 s7_q6aa_outputsales_`i' s7_q6aa_outputsalesfx_`i'
    recode s7_q6aa_outputsales_`i' -99 = .
    replace s7_q6aa_outputsales_`i' = 0 if  s7_q6a_soldoutput_`i' == 2
}

** need to run Nick Li's do file here in order to get at actual crop production - these results bring in preliminary values for these
egen totcropproduction_ksh = rowtotal(crop_revenue_1 crop_revenue_2 crop_revenue_3 crop_revenue_4 crop_revenue_5), m

forval i=1/5 {
    replace crop_sales_`i' = 0 if s7_q17_soldcrop_`i' == 2
}
egen totcropsales_bycrop = rowtotal(crop_sales_1 crop_sales_2 crop_sales_3 crop_sales_4 crop_sales_5), m

gen cropsales_q6 = s7_q6aa_cropsales_1
replace cropsales_q6 = 0 if s7_q6a_soldcrops_1 == 2 // most comparable to the rest - only sales for households involved in crops

* we have multiple measures of crop sales that we can compare to production - how do they compare?
summ totcropproduction_ksh totcropsales_bycrop cropsales_q6
count if totcropsales_bycrop > cropsales_q6 & ~mi(totcropsales_bycrop) & ~mi(cropsales_q6)
count if totcropsales_bycrop < cropsales_q6 & ~mi(totcropsales_bycrop) & ~mi(cropsales_q6)
count if totcropproduction_ksh < cropsales_q6 & ~mi(totcropproduction_ksh) & ~mi(cropsales_q6)

** fill in own poultry egg and dairy production here - FOR NOW JUST USING VALUES IN SHILLINGS - NEED TO UPDATE TO INCORPORATE NON-SHILLING VALUES.

    * poultry own consumption
    list s1_hhid_key  s12_q5*12 s12_q6*12 if s12_q5_homeprodmonths12 > 12 & ~mi(s12_q5_homeprodmonths12 )

    * for cases where amount == month, set month to one - weird, but best way to get total
    replace s12_q5_homeprodmonths12 = 1 if s12_q5_homeprodmonths12 == s12_q6_homeprodcnsmamt12 & ~mi(s12_q6_homeprodcnsmamt12) & ~mi(s12_q5_homeprodmonths12)

    * for months > 12, setting to 12
    replace s12_q5_homeprodmonths12 = 12 if s12_q5_homeprodmonths12 == 20 | s12_q5_homeprodmonths12 == 50 | s12_q5_homeprodmonths12 == 450

    replace s12_q5_homeprodmonths12 = 5 if s1_hhid_key == "601040403002-035"
    replace s12_q6_homeprodcnsmamt12 = 400 if s1_hhid_key == "601040403002-035"

    replace s12_q5_homeprodmonths12 = 1 if s1_hhid_key == "601050201005-074"
    replace s12_q6_homeprodcnsmamt12 = 500 if s1_hhid_key == "601050201005-074" // this value was 0, so don't know what to make of it. but 500 as months doesn't make sense.

replace s12_q5_homeprodmonths12 = 2 if s1_hhid_key == "601050501004-065" // this was 600, amount per month 300, assuming 600 was yearly

replace s12_q5_homeprodmonths13 = 12 if s12_q5_homeprodmonths13 == 50 // capping at 12 months

gen has_poultry_ownprod = s12_q3_hasgrown12  == 1 if ~mi(s12_q3_hasgrown12 )
tab1 s12_q5_homeprodmonths12 s12_q6_homeprodcnsmamt12 s12_q6_homeprodcnsmunit12  if  has_poultry_ownprod == 1, m




list s1_hhid_key version s12_q5*12 s12_q6*12 if s12_q5_homeprodmonths12 > 12 & ~mi(s12_q5_homeprodmonths12)

gen poultry_owncons = s12_q5_homeprodmonths12 * s12_q6_homeprodcnsmamt12 if s12_q6_homeprodcnsmunit12 == 1 // only doing this for shilling values - need to replace for the rest
replace poultry_owncons = 0 if has_poultry_ownprod == 0 | s12_q2_hascons12 == 0
summ poultry_owncons
count if poultry_owncons == .

gen has_beef_ownprod = s12_q3_hasgrown11  == 1 if ~mi(s12_q3_hasgrown11 )
tab1 s12_q5_homeprodmonths11 s12_q6_homeprodcnsmamt11 s12_q6_homeprodcnsmunit11 if  has_beef_ownprod == 1, m
gen beef_owncons = s12_q5_homeprodmonths11 * s12_q6_homeprodcnsmamt11 if s12_q6_homeprodcnsmunit11 == 1
replace beef_owncons = 0 if has_beef_ownprod == 0 | s12_q2_hascons11 == 0
summ beef_owncons
count if beef_owncons == .

gen has_egg_ownprod = s12_q3_hasgrown13  == 1 if ~mi(s12_q3_hasgrown13 )
tab1 s12_q5_homeprodmonths13 s12_q6_homeprodcnsmamt13 s12_q6_homeprodcnsmunit13 if  has_egg_ownprod == 1, m

gen egg_owncons = s12_q5_homeprodmonths13 * s12_q6_homeprodcnsmamt13 if s12_q6_homeprodcnsmunit13 == 1
replace egg_owncons = 0 if has_egg_ownprod == 0 | s12_q2_hascons13 == 0
summ egg_owncons
count if egg_owncons == .


* this still needs to incorporate own poultry dairy and egg consumption
summ totcropproduction_ksh s7_q6aa_outputsales_2 s7_q6aa_outputsales_3 s7_q6aa_outputsales_4 s7_q6aa_cropsales_5 beef_owncons poultry_owncons egg_owncons

egen totagrevenue = rowtotal( totcropproduction_ksh s7_q6aa_outputsales_2 s7_q6aa_outputsales_3 s7_q6aa_outputsales_4 s7_q6aa_cropsales_5 beef_owncons poultry_owncons egg_owncons), m
summ totagrevenue


** now, costs side **
* crop costs - breaking out each componenet so that we can estimate relationship *

* ag land amount and costs
tab1 s7_q3_agacres_1 s6_q8b_agacresrenting s6_q8c_monthsrenting s6_q8d_mthlandrent s6_q8di_mthlandrentfx
//converting negative value of acres rent to missing
recode s6_q8b_agacresrenting -25 = .
recode s6_q8d_mthlandrent -99 = .

count if s7_q3_agacres_1 < s6_q8b_agacresrenting & ~mi(s6_q8b_agacresrenting) & ~mi(s7_q3_agacres_1)

* Monthly land rent does not always capture rent in monthly terms - sometimes this was reported in years or seasons. If reported in years or seasons, setting total amount. May want to explore some alternatives here to make sure I'm getting a calculation that makes sense. Ensure range of land rental costs makes sense to folks in the field.
tab s6_q8dii_landrentperiod
gen s6_q8d_mthlandrent_ksh = s6_q8d_mthlandrent
replace s6_q8d_mthlandrent_ksh = . if s6_q8d_mthlandrent == 3

gen aglandcost = s6_q8c_monthsrenting
 * s6_q8d_mthlandrent_ksh if s6_q8dii_landrentperiod == 3
replace aglandcost = s6_q8d_mthlandrent_ksh if s6_q8dii_landrentperiod == 1 | s6_q8dii_landrentperiod == 2
summ aglandcost

* total ag land
recode s7_q3_agacres_1 (-99 = .)
* making some corrections - these seem like missed decimal places
replace s7_q3_agacres_1 = 0.25 if s6_q8b_agacresrenting == 0.25 & s6_q6b_agacresowned == 0.25 & s7_q3_agacres_1 == 25
replace s7_q3_agacres_1 = 0.75 if s6_q8b_agacresrenting == 0.25 & s6_q6b_agacresowned == 0.5 & s7_q3_agacres_1 == 75
replace s7_q3_agacres_1 = 0.21 if s6_q8b_agacresrenting == 0.25 & s6_q6b_agacresowned == 0 & s7_q3_agacres_1 == 21

replace s7_q3_agacres_1 = 0.8 if s1_hhid_key == "601010201009-019" // report using 0.8 acres for each of their crops and intercropping. 24 seesm out of line
replace s7_q3_agacres_1 = 1 if s1_hhid_key == "601020205004-054" // reported 1000 here, but ag acres owned and amount used for maize both 1, so replacing
replace  s7_q3_agacres_1 = 1 if s1_hhid_key == "601040601005-014" // was 18, seems like typo - maize and beans intercropped on 0.5 acres, sorghum grown on 0.5 acres, total ag ownership is 1 acre


gen aglanduse = s7_q3_agacres_1
la var aglanduse "Total land used for crops (q3)"
summ aglanduse



forval i=1/5 {
    //recode negative value to missing
    tab1 s7_q12_outsalpaid_`i' s7_q12_outsalpaidfx_`i'
    gen s7_q12_outsalpaid_`i'_ksh = s7_q12_outsalpaid_`i'
    replace s7_q12_outsalpaid_`i'_ksh = . if s7_q12_outsalpaidfx_`i' == 3
}

tab1 s7_q13a_toolsspend_1 s7_q13c_fertilizerspend_1 s7_q13d_irrigationspend_1 s7_q13e_improvedseedspend_1 s7_q13f_aginsurancespend_1 s7_q13_spendfx_1 s7_q13b_animalmedspend_2 s7_q13d_irrigationspend_2 s7_q13_spendfx_2 s7_q13b_animalmedspend_3 s7_q13_spendfx_3 s7_q13b_animalmedspend_4 s7_q13f_aginsurancespend_4 s7_q13_spendfx_4 s7_q13a_toolsspend_5 s7_q13b_animalmedspend_5 s7_q13c_fertilizerspend_5 s7_q13d_irrigationspend_5 s7_q13e_improvedseedspend_5 s7_q13f_aginsurancespend_5 s7_q13_spendfx_5
recode s7_q13c_fertilizerspend_1 -99 = .
recode s7_q13d_irrigationspend_1 -99 = .
recode s7_q13e_improvedseedspend_1 -99 = .
recode s7_q13b_animalmedspend_2 -99 = .

** costs by ag activity **
egen cropinputcosts = rowtotal(s7_q13a_toolsspend_1 s7_q13c_fertilizerspend_1 s7_q13d_irrigationspend_1 s7_q13e_improvedseedspend_1 s7_q13f_aginsurancespend_1 ), m
egen totcropcosts = rowtotal(s7_q12_outsalpaid_1_ksh s7_q13a_toolsspend_1 s7_q13c_fertilizerspend_1 s7_q13d_irrigationspend_1 s7_q13e_improvedseedspend_1 s7_q13f_aginsurancespend_1 ), m

egen livestockinputcosts = rowtotal(s7_q13b_animalmedspend_2 s7_q13d_irrigationspend_2), m
egen totlivestockcosts = rowtotal(s7_q12_outsalpaid_2_ksh s7_q13b_animalmedspend_2 s7_q13d_irrigationspend_2), m

egen poultryinputcosts = rowtotal(s7_q13b_animalmedspend_3), m
egen totpoultrycosts = rowtotal(s7_q12_outsalpaid_3_ksh s7_q13b_animalmedspend_3), m

egen fishpondinputcosts = rowtotal( s7_q13b_animalmedspend_4 s7_q13f_aginsurancespend_4 ), m
egen totfishpondcosts = rowtotal(s7_q12_outsalpaid_4_ksh s7_q13b_animalmedspend_4 s7_q13f_aginsurancespend_4 ), m

egen othinputcosts = rowtotal(s7_q13a_toolsspend_5 s7_q13b_animalmedspend_5 s7_q13c_fertilizerspend_5 s7_q13d_irrigationspend_5 s7_q13e_improvedseedspend_5 s7_q13f_aginsurancespend_5 ), m
egen totothagcosts = rowtotal(s7_q12_outsalpaid_5_ksh     s7_q13a_toolsspend_5 s7_q13b_animalmedspend_5 s7_q13c_fertilizerspend_5 s7_q13d_irrigationspend_5 s7_q13e_improvedseedspend_5 s7_q13f_aginsurancespend_5 ), m

egen totagcosts = rowtotal(totcropcosts totlivestockcosts totpoultrycosts totfishpondcosts totothagcosts     aglandcost), m
summ totagcosts

gen totagcosts_neg = - totagcosts
summ totagcosts_neg

egen totagprofits = rowtotal(totagrevenue totagcosts_neg), m
summ totagprofits


gen p3_1_agprofit = totagprofits
la var p3_1_agprofit "P3.1: Total profits from ag. and livestock in the last 12 months"

wins_top1 p3_1_agprofit
summ p3_1_agprofit_wins
trim_top1 p3_1_agprofit
summ p3_1_agprofit_trim
*/
*** TOTAL PROFITS FROM NON-AGRICULTURE BUSINESS IN THE LAST 12 MONTHS ***
tab s8_q1_selfemployed
gen selfemp = (s8_q1_selfemployed == 1) if ~mi(s8_q1_selfemployed)

* Yearly profits (main PAP specification)
tab version if mi(s8_q11b_profitlastyr_1) & selfemp == 1

tab1 s8_q11b_profitlastyr_1 s8_q11b_profitlastyr_2 s8_q11b_profitlastyr_3 s8_q11b_profitlastyr_4 s8_q11b_profitlastyr_5 s8_q11_profitfx_1 s8_q11_profitfx_2 s8_q11_profitfx_3 s8_q11_profitfx_4 s8_q11_profitfx_5
recode s8_q11b_profitlastyr_? (-99 -88 = .)

//converting values in foreign currencies into missing
// MW doesn't believe foreigh currencies - thinkgs these are likely typos. Treating as KSH for now

egen totselfempprofit12_selfemp = rowtotal(s8_q11b_profitlastyr_1 s8_q11b_profitlastyr_2 s8_q11b_profitlastyr_3 s8_q11b_profitlastyr_4 s8_q11b_profitlastyr_5), m
summ totselfempprofit12_selfemp
la var totselfempprofit12_selfemp "Total profits from non-ag business among self-employed, last 12 months"

gen totselfempprofit12_all = totselfempprofit12_selfemp
replace totselfempprofit12_all = 0 if selfemp == 0
la var totselfempprofit12_all "Total profits from non-ag business, all hhs, last 12 months"


* Monthly variables
recode s8_q11a_profitlastmth_1  s8_q11a_profitlastmth_2  s8_q11a_profitlastmth_3 s8_q11a_profitlastmth_4  s8_q11a_profitlastmth_5  (-99 -88 = .)

tab1 s8_q11a_profitlastmth_1  s8_q11a_profitlastmth_2  s8_q11a_profitlastmth_3 s8_q11a_profitlastmth_4  s8_q11a_profitlastmth_5


egen totselfempprofit1_selfemp = rowtotal(s8_q11a_profitlastmth_1  s8_q11a_profitlastmth_2  s8_q11a_profitlastmth_3 s8_q11a_profitlastmth_4  s8_q11a_profitlastmth_5 ), m
summ totselfempprofit1_selfemp
la var totselfempprofit1_selfemp "Total profits from non-ag business among self-employed, last month"

gen totselfempprofit1_all = totselfempprofit1_selfemp
replace totselfempprofit1_all = 0 if selfemp == 0
la var totselfempprofit1_all "Total profits from non-ag business, all hhs, last month"

* How often do selfemployed enterprises have zero / negative profits in the last 12 months?
* do we want to generate a second self-employed measure that is only based on positive profits?

gen p3_2_nonagprofit = totselfempprofit12_all
la var p3_2_nonagprofit "P3.2: Total profits from non-ag. business in the last 12 months"

wins_top1 p3_2_nonagprofit
summ p3_2_nonagprofit_wins
trim_top1 p3_2_nonagprofit
summ p3_2_nonagprofit_trim


*** TOTAL AFTER-TAX VALUE OF WAGES, SALARIES AND IN-KIND TRANFERS EARNED LAST 12 MONTHS ***
tab s9_q1_employed
recode s9_q1_employed (-99 = .)
gen emp = s9_q1_employed == 1 if ~mi(s9_q1_employed)
la var emp "Household member employed, working for wages"

forval i=1/4 {
    tab1 s9_q10_cashsalary_`i' s9_q10_cashsalaryfx_`i' s9_q11_incometax_`i' s9_q11_incometaxfx_`i' s9_q12a_payinkind_`i' s9_q12b_healthins_`i' s9_q12c_housing_`i' s9_q12d_clothing_`i' s9_q12e_training_`i' s9_q12f_othbenefits_`i' s9_q12_benefitsfx_`i'
    recode s9_q10_cashsalary_`i' (-999 -99 = .)
    recode s9_q11_incometax_`i' -99 = .
    recode s9_q12a_payinkind_`i' -99 = .
    recode s9_q12b_healthins_`i' -99 = .
    recode s9_q12c_housing_`i' -99 = .
    recode s9_q12d_clothing_`i' -99 = .
    recode s9_q12e_training_`i' -99 = .
    recode s9_q12f_othbenefits_`i' -99 = .
}

// MW doesn't buy these as different currencies, and here all values reported as zero. Not including this part
/*
foreach var in s9_q12a_payinkind_1 s9_q12b_healthins1 s9_q12c_housing_1 s9_q12d_clothing_1 s9_q12e_training_1 s9_q12f_othbenefits_1 {
    gen `var'_ksh = `var'
    replace `var'_ksh = . if s9_q12_benefitsfx_1 == 2 | s9_q12_benefitsfx_1 == 3
}
*/

**number of months worked in the last 12 months (if full or part time)

forval i=1/4 {
    gen jobstart_date`i' = date(s9_q3_datestart_`i' , "MD20Y")
	replace jobstart_date`i' = date(s9_q3_datestart_`i' , "DM20Y") if mi(jobstart_date`i')
	format jobstart_date`i' %td
	gen jobstart_mth`i' = mofd(jobstart_date`i')
	format jobstart_mth`i' %tm

	gen mths_worked_last12_`i' = survey_mth - jobstart_mth`i' + 1
	replace mths_worked_last12_`i' = . if mths_worked_last12_`i' > 1300 & ~mi(mths_worked_last12_`i') //DK was coded as year 1900 for this question (106 obs) - for these cases, we could also assume that they worked 12 months and didn't know because start date was longer than 12 months ago. Check robustness to both of these.
	replace mths_worked_last12_`i' = . if mths_worked_last12_`i' < 0 & ~mi(mths_worked_last12_`i') //What should we do with the obs that reported beginning to work after the interview date? set to zero or to missing? (3 obs)
    // MW comment: one of these looks like a typo (should have been 2016m12 instead of 2017m12 and we surveyed in 2017m1. Less clear about the others. Keeping all as missing for now.)
	replace mths_worked_last12_`i' = 12 if mths_worked_last12_`i' > 12 & ~mi(mths_worked_last12_`i')
	tab mths_worked_last12_`i'
	gen mths_worked_last12_alt_`i' = mths_worked_last12_`i'
    replace mths_worked_last12_alt_`i' = 12 if yofd(jobstart_date`i') == 1900 // assuming that any DK responses started more than 12 months ago
    la var mths_worked_last12_alt_`i' "Alt job months worked - assuming DK started a year or more ago"
}

forval i=1/4 {
	foreach var in s9_q10_cashsalary_`i' s9_q11_incometax_`i' s9_q12a_payinkind_`i' s9_q12b_healthins_`i' s9_q12c_housing_`i' s9_q12d_clothing_`i' s9_q12e_training_`i' s9_q12f_othbenefits_`i' {
		gen `var'_yrly = `var'*mths_worked_last12_`i'  if s9_q7_workpattern_`i' == 1 | s9_q7_workpattern_`i' == 2
		summ `var'_yrly
	}
}

**number of months worked in the last 12 months (if seasonal)
// code 13 refers to "all of the last 12 months". Unclear what it means when there is a 13 as well as other options

tab1 s9_q7a_workmonths_1 s9_q7a_workmonths_2 s9_q7a_workmonths_3 s9_q7a_workmonths_4

forval i =1/4 {
    gen seasonal_workmths_`i' = .
    replace s9_q7a_workmonths_`i' = "" if s9_q7a_workmonths_`i' == "."
    // to start, any 13s considered as all last 12 months. Later try alternatives
    tab s9_q7a_workmonths_`i'
    replace seasonal_workmths_`i' = 12 if strpos(s9_q7a_workmonths_`i', "13")
    replace s9_q7a_workmonths_`i' = subinstr(s9_q7a_workmonths_`i', "13", "", 1)
    replace seasonal_workmths_`i' = wordcount(s9_q7a_workmonths_`i') if ~mi(s9_q7a_workmonths_`i') & mi(seasonal_workmths_`i')
    tab seasonal_workmths_`i'
}

forval i=1/4 {
	foreach var in s9_q10_cashsalary_`i' s9_q11_incometax_`i' s9_q12a_payinkind_`i' s9_q12b_healthins_`i' s9_q12c_housing_`i' s9_q12d_clothing_`i' s9_q12e_training_`i' s9_q12f_othbenefits_`i' {
        replace `var'_yrly = `var'*seasonal_workmths_`i' if s9_q7_workpattern_`i' == 3
    	summ `var'_yrly
	}
    egen benefits_job`i'_yrly = rowtotal(s9_q12b_healthins_`i'_yrly s9_q12c_housing_`i'_yrly s9_q12d_clothing_`i'_yrly s9_q12e_training_`i'_yrly s9_q12f_othbenefits_`i'_yrly)
}

**yearly earnings
* cash salary
egen yrlycashsal = rowtotal(s9_q10_cashsalary_1_yrly s9_q10_cashsalary_2_yrly s9_q10_cashsalary_3_yrly s9_q10_cashsalary_4_yrly), m
* payment in-kind
egen yrlypayinkind = rowtotal(s9_q12a_payinkind_1_yrly s9_q12a_payinkind_2_yrly s9_q12a_payinkind_3_yrly s9_q12a_payinkind_4_yrly), m

egen yrlybenefits = rowtotal(benefits_job1_yrly benefits_job2_yrly benefits_job3_yrly benefits_job4_yrly), m

egen yrlyearnings = rowtotal(yrlycashsal yrlypayinkind yrlybenefits), m
summ yrlyearnings

* looking into cases where income taxes are greater than total earnings
list s9_q10_cashsalary_? s9_q10_cashsalary_?_yrly yrlybenefits yrlyearnings s9_q11_incometax_? s9_q11_incometax_?_yrly  if (s9_q11_incometax_1_yrly > yrlyearnings & ~mi(s9_q11_incometax_1_yrly)) | (s9_q11_incometax_2_yrly > yrlyearnings & ~mi(s9_q11_incometax_2_yrly))


* if zero earnings, or taxes are greater than earnings, assuming taxes reported for 12 months rather than 1
replace s9_q11_incometax_1_yrly  = s9_q11_incometax_1 if s9_q11_incometax_1_yrly > yrlyearnings & ~mi(s9_q11_incometax_1_yrly)
replace s9_q11_incometax_2_yrly = s9_q11_incometax_2 if  s9_q11_incometax_2_yrly > yrlyearnings & ~mi(s9_q11_incometax_2_yrly)
// no income taxes for jobs 3 and 4


egen yrlyincometax = rowtotal(s9_q11_incometax_1_yrly s9_q11_incometax_2_yrly s9_q11_incometax_3_yrly s9_q11_incometax_4_yrly), m
summ yrlyincometax
gen yrlyincometax_neg = - yrlyincometax

egen netearnings_emp = rowtotal(yrlyearnings yrlyincometax_neg), m
summ netearnings_emp

gen netearnings_all = netearnings_emp
replace netearnings_all = 0 if emp == 0
gen p3_3_wageearnings = netearnings_all
la var p3_3_wageearnings "P3.3: Total after-tax wage earnings in the last 12 months"

wins_top1 p3_3_wageearnings
summ p3_3_wageearnings_wins
trim_top1 p3_3_wageearnings
summ p3_3_wageearnings_trim

egen nonagincome = rowtotal(p3_3_wageearnings p3_2_nonagprofit)
wins_top1 nonagincome
summ nonagincome_wins
trim_top1 nonagincome
summ nonagincome_trim



*** HOURLY WAGE RATE FOR THOSE EMPLOYED/WORKING FOR WAGES ***
* this should be created on an individual-level dataset. is there anything else we want on that level?

*** SUMMARY MEASURE: TOTAL HOUSEHOLD INCOME IN THE LAST 12 MONTHS ***

egen p3_totincome = rowtotal(p3_1_agprofit p3_2_nonagprofit p3_3_wageearnings), m
la var p3_totincome "P3: Total household income in the last 12 months"
summ p3_totincome

wins_top1 p3_totincome
summ p3_totincome_wins
trim_top1 p3_totincome
summ p3_totincome_trim

/*********************************/
/*   FAMILY 4: business revenue  */
/*********************************/

*** TOTAL REVENUE FROM AGRICULTURE AND LIVESTOCK IN THE LAST 12 MONTHS ***
gen p4_1_agrevenue = totagrevenue
la var p4_1_agrevenue "P4.1: Total revenue from ag. and livestock in the last 12 months"

wins_top1 p4_1_agrevenue
summ p4_1_agrevenue_wins
trim_top1 p4_1_agrevenue
summ p4_1_agrevenue_trim

*** TOTAL REVENUE FROM NON-AG. BUSINESS IN THE LAST 12 MONTHS ***
//It says sum of variables 8.8b but I believe it is 8.7b
tab1 s8_q7b_earningslastyr_1 s8_q7b_earningslastyr_2 s8_q7b_earningslastyr_3 s8_q7b_earningslastyr_4 s8_q7b_earningslastyr_5 s8_q7_earningsfx_1 s8_q7_earningsfx_2 s8_q7_earningsfx_3 s8_q7_earningsfx_4 s8_q7_earningsfx_5
recode s8_q7b_earningslastyr_? (-99 -88 = .)
/*
//converting values to missing if not KSh
gen s8_q7b_earningslastyr_1_ksh = s8_q7b_earningslastyr_1
replace s8_q7b_earningslastyr_1_ksh = . if s8_q7_earningsfx_1 == 2 | s8_q7_earningsfx_1 == 3
gen s8_q7b_earningslastyr_2_ksh = s8_q7b_earningslastyr_2
replace s8_q7b_earningslastyr_2_ksh = . if s8_q7_earningsfx_2 == 2 | s8_q7_earningsfx_2 == 3
*/
egen totselfemprev = rowtotal(s8_q7b_earningslastyr_1 s8_q7b_earningslastyr_2 s8_q7b_earningslastyr_3 s8_q7b_earningslastyr_4 s8_q7b_earningslastyr_5), m
summ totselfemprev
tab totselfemprev if selfemp == 1, m // missings here correspond to DK? Number should be small

gen p4_2_nonagrevenue = totselfemprev
replace p4_2_nonagrevenue = 0 if selfemp == 0
la var p4_2_nonagrevenue "P4.2: Total revenue from non-ag. business in the last 12 months"
summ p4_2_nonagrevenue

wins_top1 p4_2_nonagrevenue
summ p4_2_nonagrevenue_wins
trim_top1 p4_2_nonagrevenue
summ p4_2_nonagrevenue_trim

*** NON-AG. BUSINESS OWNED BY HOUSEHOLD ***
gen p4_3_selfemployed = s8_q1_selfemployed
recode p4_3_selfemployed 2 = 0
la var p4_3_selfemployed "P4.3: Non-ag. business owned by household"
summ p4_3_selfemployed


*** TOTAL COSTS IN AGRICULTURE AND LIVESTOCK IN THE LAST 12 MONTHS ***

gen p4_5_agcosts = totagcosts
la var p4_5_agcosts "P4.5: Total costs in agriculture and livestock in the last 12 months"
summ p4_5_agcosts

wins_top1 p4_5_agcosts
summ p4_5_agcosts_wins
trim_top1 p4_5_agcosts
summ p4_5_agcosts_trim

*** TOTAL COSTS IN NON-AG. BUSINESS IN THE LAST 12 MONTHS ***
* how many enterprises have employees (not counting main decision-maker)?
replace s8_q6_numemployees_1 = . if s8_q6_numemployees_1 > 20 // values of 25000 and 3000 do not look right - look like potential wage bill numbers, not number of employees
replace s8_q6b_employeeslast6mth_1 = . if s8_q6b_employeeslast6mth_1 == 1500 // this amount matches wage bill - misunderstood
tab1 s8_q6_numemployees_? s8_q6a_hhemployees_? s8_q6b_employeeslast6mth_?

tab1 s8_q6b_wagebill_1 s8_q6b_wagebillfx_1 s8_q6b_wagebill_2 s8_q6b_wagebillfx_2 s8_q6b_wagebill_3 s8_q6b_wagebillfx_3 s8_q6b_wagebill_4 s8_q6b_wagebillfx_4 s8_q6b_wagebill_5 s8_q6b_wagebillfx_5
recode s8_q6b_wagebill_? (-99 = .)
//converting values to missing if not KSh --> all the rest of the numbers seem to be in KSH, so will assume KSH now
/*
gen s8_q6b_wagebill_1_ksh = s8_q6b_wagebill_1
replace s8_q6b_wagebill_1_ksh = . if s8_q6b_wagebillfx_1 == 2 | s8_q6b_wagebillfx_1 == 3
gen s8_q6b_wagebill_2_ksh = s8_q6b_wagebill_2
replace s8_q6b_wagebill_2_ksh = . if s8_q6b_wagebillfx_2 == 3
*/

la define premise 1 "Yes" 2 "No" 3 "This business has no premises"
la values s8_q15_ownpremises_? premise

tab1 s8_q15_ownpremises_?
tab1 s8_q15a_rentamt_1 s8_q15a_rentamtfx_1 s8_q15a_rentamt_2 s8_q15a_rentamtfx_2 s8_q15a_rentamt_3 s8_q15a_rentamtfx_3 s8_q15a_rentamt_4 s8_q15a_rentamtfx_4 s8_q15a_rentamt_5 s8_q15a_rentamtfx_5
recode s8_q15a_rentamt_? (-99 = .)
//converting values to missing if not KSh
/*
gen s8_q15a_rentamt_1_ksh = s8_q15a_rentamt_1
replace s8_q15a_rentamt_1_ksh = . if s8_q15a_rentamtfx_1 == 2 | s8_q15a_rentamtfx_1 == 3
gen s8_q15a_rentamt_2_ksh = s8_q15a_rentamt_2
replace s8_q15a_rentamt_2_ksh = . if s8_q15a_rentamtfx_2 == 3
*/

list s8_q16_costsfx_? if s8_q16_costsfx_1 == 2 | s8_q16_costsfx_1 == 3
tab s8_q16_costsfx_1
list s8_q16a_elecwater_1 s8_q16b_insurance_1 s8_q16c_interest_1 s8_q16d_goodsresale_1 s8_q16e_inputs_1 s8_q16f_repairs_1 s8_q16g_security_1 s8_q16h_othercosts1 if s8_q16_costsfx_1 == 2 | s8_q16_costsfx_1 == 3
// none of these would be out of line as KSH
foreach var in s8_q16a_elecwater_1 s8_q16b_insurance_1 s8_q16c_interest_1 s8_q16d_goodsresale_1 s8_q16e_inputs_1 s8_q16f_repairs_1 s8_q16g_security_1 s8_q16h_othercosts1 {
    recode `var' -99 = .
    tab `var'
}
tab s8_q16_costsfx_2
list s8_q16_costsfx_? if s8_q16_costsfx_2 == 2
list s8_q16a_elecwater_2 s8_q16b_insurance_2 s8_q16c_interest_2 s8_q16d_goodsresale_2 s8_q16e_inputs_2 s8_q16f_repairs_2 s8_q16g_security_2 s8_q16h_othercosts2 if s8_q16_costsfx_2 == 2 // values reasonable for KSH, and other business costs reported in KSH
foreach var in s8_q16a_elecwater_2 s8_q16b_insurance_2 s8_q16c_interest_2 s8_q16d_goodsresale_2 s8_q16e_inputs_2 s8_q16f_repairs_2 s8_q16g_security_2 s8_q16h_othercosts2 {
    recode `var' -99 = .
    tab `var'
    //converting values to missing if not KSh
}
tab s8_q16_costsfx_3
foreach var in s8_q16a_elecwater_3 s8_q16b_insurance_3 s8_q16c_interest_3 s8_q16d_goodsresale_3 s8_q16e_inputs_3 s8_q16f_repairs_3 s8_q16g_security_3 s8_q16h_othercosts3 s8_q16_costsfx_3 {
    recode `var' -99 = .
    tab `var'
}
tab s8_q16_costsfx_4
foreach var in s8_q16a_elecwater_4 s8_q16b_insurance_4 s8_q16c_interest_4 s8_q16d_goodsresale_4 s8_q16e_inputs_4 s8_q16f_repairs_4 s8_q16g_security_4 s8_q16h_othercosts4 s8_q16_costsfx_4 {
    recode `var' -99 = .
    tab `var'
}
tab s8_q16_costsfx_5
foreach var in s8_q16a_elecwater_5 s8_q16b_insurance_5 s8_q16c_interest_5 s8_q16d_goodsresale_5 s8_q16e_inputs_5 s8_q16f_repairs_5 s8_q16g_security_5 s8_q16h_othercosts5 s8_q16_costsfx_5 {
    recode `var' -99 = .
    tab `var'
}

list s8_q16_costsfx_1 s8_q17_expensesfx_1 if s8_q16_costsfx_1 == 2 |  s8_q16_costsfx_1 == 3  | s8_q17_expensesfx_1 == 2 | s8_q17_expensesfx_1 == 3 // nothing consistent across here - assuming values in KSH

tab1 s8_q17_expensesfx_1
foreach var in s8_q17a_healthinsur_1 s8_q17b_marketfees_1 s8_q17c_countytaxes_1 s8_q17d_natltaxes1 s8_q17e_localtaxes_1 s8_q17f_bribes_1 {
    recode `var' -99 = .
    tab `var'
}
tab1 s8_q17_expensesfx_2
foreach var in s8_q17a_healthinsur_2 s8_q17b_marketfees_2 s8_q17c_countytaxes_2 s8_q17d_natltaxes2 s8_q17e_localtaxes_2 s8_q17f_bribes_2 {
    recode `var' -99 = .
    tab `var'
}
tab s8_q17_expensesfx_3
foreach var in s8_q17a_healthinsur_3 s8_q17b_marketfees_3 s8_q17c_countytaxes_3 s8_q17d_natltaxes3 s8_q17e_localtaxes_3 s8_q17f_bribes_3 {
    recode `var' -99 = .
    tab `var'
}
tab s8_q17_expensesfx_4
foreach var in s8_q17a_healthinsur_4 s8_q17b_marketfees_4 s8_q17c_countytaxes_4 s8_q17d_natltaxes4 s8_q17e_localtaxes_4 s8_q17f_bribes_4 {
    recode `var' -99 = .
    tab `var'
}


tab s8_q17_expensesfx_5
foreach var in s8_q17a_healthinsur_5 s8_q17b_marketfees_5 s8_q17c_countytaxes_5 s8_q17d_natltaxes5 s8_q17e_localtaxes_5 s8_q17f_bribes_5 {
    recode `var' -99 = .
    tab `var'
}

* total nonag costs and expenses by business
forval i=1/5 {
    egen nonagcosts_ent`i'      = rowtotal(s8_q6b_wagebill_`i' s8_q15a_rentamt_`i' s8_q16a_elecwater_`i' s8_q16b_insurance_`i' s8_q16c_interest_`i' s8_q16d_goodsresale_`i' s8_q16e_inputs_`i' s8_q16f_repairs_`i' s8_q16g_security_`i' s8_q16h_othercosts`i' ///
    s8_q17a_healthinsur_`i' s8_q17b_marketfees_`i' s8_q17c_countytaxes_`i' s8_q17d_natltaxes`i' s8_q17e_localtaxes_`i' s8_q17f_bribes_`i'), m
}

* total household spending by category
egen nonagcosts_wagebill_mth    = rowtotal(s8_q6b_wagebill_?), m
egen nonagcosts_rent_mth        = rowtotal(s8_q15a_rentamt_?), m
egen nonagcosts_elecwater_mth   = rowtotal(s8_q16a_elecwater_?), m
egen nonagcosts_insurance_mth   = rowtotal(s8_q16b_insurance_?), m
egen nonagcosts_interest_mth    = rowtotal(s8_q16c_interest_?), m
egen nonagcosts_goodsresale_mth = rowtotal(s8_q16d_goodsresale_?), m
egen nonagcosts_inputs_mth      = rowtotal(s8_q16e_inputs_?), m
egen nonagcosts_repairs_mth     = rowtotal(s8_q16f_repairs_?), m
egen nonagcosts_security_mth    = rowtotal(s8_q16g_security_?), m
egen nonagcosts_other_mth       = rowtotal(s8_q16h_othercosts?), m

egen nonagcosts_healthinsur_mth = rowtotal(s8_q17a_healthinsur_?), m
egen nonagcosts_marketfees_mth  = rowtotal(s8_q17b_marketfees_?), m
egen nonagcosts_countytaxes_mth = rowtotal(s8_q17c_countytaxes_?), m
egen nonagcosts_natltaxes_mth   = rowtotal(s8_q17d_natltaxes?), m
egen nonagcosts_localtaxes_mth  = rowtotal(s8_q17e_localtaxes_?), m
egen nonagcosts_bribes_mth      = rowtotal(s8_q17f_bribes_?), m


egen nonagcosts_mth = rowtotal(nonagcosts_ent1 nonagcosts_ent2 nonagcosts_ent3 nonagcosts_ent4 nonagcosts_ent5), m
summ nonagcosts_mth
gen nonagcosts = 12*nonagcosts_mth

tab1 s8_q8a_licensecost_?
recode s8_q8a_licensecost_? (-99 = .)

tab1 s8_q8b_licensevalid_?
recode s8_q8b_licensevalid_? (-99 = .)

list s8_q8a_licensecost_1 s8_q8b_licensevalid_1 if s8_q8b_licensevalid_1 == 0 & ~mi(s8_q8a_licensecost_1)

forval i=1/5 {
    gen annuallicensecost_`i' = (s8_q8a_licensecost_`i'*12)/s8_q8b_licensevalid_`i'
    replace annuallicensecost_`i' = 0 if s8_q8a_licensecost_`i' == 0
}

tab1 annuallicensecost_?

egen totnonagcosts_selfemp = rowtotal(nonagcosts annuallicensecost_?), m
summ totnonagcosts_selfemp

gen totnonagcosts_all = totnonagcosts_selfemp
replace totnonagcosts_all = 0 if selfemp == 0

gen p4_6_nonagcosts = totnonagcosts_all
la var p4_6_nonagcosts "P4.6: Total costs in non-ag. business in the last 12 months"
summ p4_6_nonagcosts

wins_top1 p4_6_nonagcosts
summ p4_6_nonagcosts_wins
trim_top1 p4_6_nonagcosts
summ p4_6_nonagcosts_trim

*** 4.4 TOTAL COSTS IN THE LAST 12 MONTHS ***

egen totcosts = rowtotal(totagcosts totnonagcosts_all), m
summ totcosts

gen p4_4_totcosts = totcosts
la var p4_4_totcosts "P4.4: Total costs in the last 12 months"
summ p4_4_totcosts

wins_top1 p4_4_totcosts
summ p4_4_totcosts_wins
trim_top1 p4_4_totcosts
summ p4_4_totcosts_trim


*** SUMMARY MEASURE: TOTAL HOUSEHOLD BUSINESS REVENUE IN THE LAST 12 MONTHS ***

egen p4_totrevenue = rowtotal(p4_1_agrevenue p4_2_nonagrevenue), m
la var p4_totrevenue "P4: Total business revenue in the last 12 months"

wins_top1 p4_totrevenue
summ p4_totrevenue_wins
trim_top1 p4_totrevenue
summ p4_totrevenue_trim



/*** GENERATING PPP VALUES FOR MONETARY OUTCOMES ***/
foreach var of varlist p3_1_agprofit* p3_2_nonagprofit* p3_3_wageearnings* p3_totincome* p4_1_agrevenue* p4_2_nonagrevenue* p4_5_agcosts* p4_6_nonagcosts* p4_4_totcosts* p4_totrevenue* {
    loc vl : var label `var'
    gen `var'_PPP = `var' * $ppprate
    la var `var'_PPP "`vl' (PPP)"
}


** saving intermediate dataset **
compress
drop s6_* s12_*  // these added in from assets and expenditure
drop s7_q7_hoursworked_* s8_q4_hrsworked_* s9_q8_hrsworked_* // these added in through labor supply
save "$da/intermediate/GE_HH-EL_income_revenue.dta", replace
project, creates("$da/intermediate/GE_HH-EL_income_revenue.dta")
